+ Dataloader accepts Custom Datasets
+ Dataset train/valid split and train/valid/test split
- Dataloader is faster (again); remove the performance regression
+ Autolabel pipeline runs through the entire way
- Autolabel pipeline is robust to long occlusions without movement
+ Autolabel pipeline is robust to hidden aruco marker in some frames
+ Autolabel pipeline is now reusable for different datasets
+ Autolabel has new visualization with a display of tracks
+ Dataset supports data processing function before passing to the jax code (on the cpu maybe??)
- Premade data processing functions: Basic augmentations, DINOv2 embedding (on the cpu maybe??)
+ Fix invalidate files bug where it deletes the actual datasets!
- Refactor object detection code to use native dataloader
+ Autolabel detects and marks occluded frames automatically
- Autolabel pipeline stabilizer simultaneously optimizes for keeping the second marker quadratical
+ Autolabel pipeline video tracker merging: a inside b for mt. thresh frames -> remove a
+ Autolabel pipeline image tracker uses classification model and improves brightness+contrast of socks to make them more recognizable
- Autolabel pipeline detects frames using some heuristic that is more useful than what we currently use
- Enable 0-100 autolabeling: autolabel, train custom classifier, autolabel with custom classifier
- Support custom camera calibration
- Autolabel stabilizer takes into account camera calibration
+ Add negative examples to the classification dataset: start with rejected objects, fill up with random views that are non-intersecting to all positive instances
+ Support learning rate scheduler
- Support fp16 training
+ Fix visualizers' track viewer by supporting more than 7 ids and supporting toggling via the track viewer directly
- Add visualizer feature to add points to track and save them into a json file another directory
- Train classification model
- Fix all tests of dataloader
- Hack sam2 to support high dynamic range images
+ Autolabel selects track images in local minimas of change rate to maximize the utility of each track. Optimize the partitioning using dynamic programming.
- Plan an advanced merging routine for the video tracker
- Implement the advanced merging routine for the video tracker
- Fix shared pointer implementation
