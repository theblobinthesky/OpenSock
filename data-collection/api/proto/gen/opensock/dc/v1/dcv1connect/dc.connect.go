// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: opensock/dc/v1/dc.proto

package dcv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "opensock/datacollection/proto/gen/opensock/dc/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DataCollectionServiceName is the fully-qualified name of the DataCollectionService service.
	DataCollectionServiceName = "opensock.dc.v1.DataCollectionService"
	// AdminServiceName is the fully-qualified name of the AdminService service.
	AdminServiceName = "opensock.dc.v1.AdminService"
	// UploadServiceName is the fully-qualified name of the UploadService service.
	UploadServiceName = "opensock.dc.v1.UploadService"
	// ConfigServiceName is the fully-qualified name of the ConfigService service.
	ConfigServiceName = "opensock.dc.v1.ConfigService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DataCollectionServiceCreateSessionProcedure is the fully-qualified name of the
	// DataCollectionService's CreateSession RPC.
	DataCollectionServiceCreateSessionProcedure = "/opensock.dc.v1.DataCollectionService/CreateSession"
	// DataCollectionServiceFinalizeSessionProcedure is the fully-qualified name of the
	// DataCollectionService's FinalizeSession RPC.
	DataCollectionServiceFinalizeSessionProcedure = "/opensock.dc.v1.DataCollectionService/FinalizeSession"
	// AdminServiceListSessionsProcedure is the fully-qualified name of the AdminService's ListSessions
	// RPC.
	AdminServiceListSessionsProcedure = "/opensock.dc.v1.AdminService/ListSessions"
	// AdminServiceDeleteSessionProcedure is the fully-qualified name of the AdminService's
	// DeleteSession RPC.
	AdminServiceDeleteSessionProcedure = "/opensock.dc.v1.AdminService/DeleteSession"
	// AdminServiceDeleteUserProcedure is the fully-qualified name of the AdminService's DeleteUser RPC.
	AdminServiceDeleteUserProcedure = "/opensock.dc.v1.AdminService/DeleteUser"
	// AdminServiceGetConfigProcedure is the fully-qualified name of the AdminService's GetConfig RPC.
	AdminServiceGetConfigProcedure = "/opensock.dc.v1.AdminService/GetConfig"
	// AdminServiceUpdateConfigProcedure is the fully-qualified name of the AdminService's UpdateConfig
	// RPC.
	AdminServiceUpdateConfigProcedure = "/opensock.dc.v1.AdminService/UpdateConfig"
	// UploadServiceInitUploadProcedure is the fully-qualified name of the UploadService's InitUpload
	// RPC.
	UploadServiceInitUploadProcedure = "/opensock.dc.v1.UploadService/InitUpload"
	// UploadServiceUploadChunkProcedure is the fully-qualified name of the UploadService's UploadChunk
	// RPC.
	UploadServiceUploadChunkProcedure = "/opensock.dc.v1.UploadService/UploadChunk"
	// UploadServiceCompleteUploadProcedure is the fully-qualified name of the UploadService's
	// CompleteUpload RPC.
	UploadServiceCompleteUploadProcedure = "/opensock.dc.v1.UploadService/CompleteUpload"
	// ConfigServiceGetProcedure is the fully-qualified name of the ConfigService's Get RPC.
	ConfigServiceGetProcedure = "/opensock.dc.v1.ConfigService/Get"
)

// DataCollectionServiceClient is a client for the opensock.dc.v1.DataCollectionService service.
type DataCollectionServiceClient interface {
	CreateSession(context.Context, *connect.Request[v1.CreateSessionRequest]) (*connect.Response[v1.CreateSessionResponse], error)
	FinalizeSession(context.Context, *connect.Request[v1.FinalizeSessionRequest]) (*connect.Response[v1.FinalizeSessionResponse], error)
}

// NewDataCollectionServiceClient constructs a client for the opensock.dc.v1.DataCollectionService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDataCollectionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DataCollectionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dataCollectionServiceMethods := v1.File_opensock_dc_v1_dc_proto.Services().ByName("DataCollectionService").Methods()
	return &dataCollectionServiceClient{
		createSession: connect.NewClient[v1.CreateSessionRequest, v1.CreateSessionResponse](
			httpClient,
			baseURL+DataCollectionServiceCreateSessionProcedure,
			connect.WithSchema(dataCollectionServiceMethods.ByName("CreateSession")),
			connect.WithClientOptions(opts...),
		),
		finalizeSession: connect.NewClient[v1.FinalizeSessionRequest, v1.FinalizeSessionResponse](
			httpClient,
			baseURL+DataCollectionServiceFinalizeSessionProcedure,
			connect.WithSchema(dataCollectionServiceMethods.ByName("FinalizeSession")),
			connect.WithClientOptions(opts...),
		),
	}
}

// dataCollectionServiceClient implements DataCollectionServiceClient.
type dataCollectionServiceClient struct {
	createSession   *connect.Client[v1.CreateSessionRequest, v1.CreateSessionResponse]
	finalizeSession *connect.Client[v1.FinalizeSessionRequest, v1.FinalizeSessionResponse]
}

// CreateSession calls opensock.dc.v1.DataCollectionService.CreateSession.
func (c *dataCollectionServiceClient) CreateSession(ctx context.Context, req *connect.Request[v1.CreateSessionRequest]) (*connect.Response[v1.CreateSessionResponse], error) {
	return c.createSession.CallUnary(ctx, req)
}

// FinalizeSession calls opensock.dc.v1.DataCollectionService.FinalizeSession.
func (c *dataCollectionServiceClient) FinalizeSession(ctx context.Context, req *connect.Request[v1.FinalizeSessionRequest]) (*connect.Response[v1.FinalizeSessionResponse], error) {
	return c.finalizeSession.CallUnary(ctx, req)
}

// DataCollectionServiceHandler is an implementation of the opensock.dc.v1.DataCollectionService
// service.
type DataCollectionServiceHandler interface {
	CreateSession(context.Context, *connect.Request[v1.CreateSessionRequest]) (*connect.Response[v1.CreateSessionResponse], error)
	FinalizeSession(context.Context, *connect.Request[v1.FinalizeSessionRequest]) (*connect.Response[v1.FinalizeSessionResponse], error)
}

// NewDataCollectionServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDataCollectionServiceHandler(svc DataCollectionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dataCollectionServiceMethods := v1.File_opensock_dc_v1_dc_proto.Services().ByName("DataCollectionService").Methods()
	dataCollectionServiceCreateSessionHandler := connect.NewUnaryHandler(
		DataCollectionServiceCreateSessionProcedure,
		svc.CreateSession,
		connect.WithSchema(dataCollectionServiceMethods.ByName("CreateSession")),
		connect.WithHandlerOptions(opts...),
	)
	dataCollectionServiceFinalizeSessionHandler := connect.NewUnaryHandler(
		DataCollectionServiceFinalizeSessionProcedure,
		svc.FinalizeSession,
		connect.WithSchema(dataCollectionServiceMethods.ByName("FinalizeSession")),
		connect.WithHandlerOptions(opts...),
	)
	return "/opensock.dc.v1.DataCollectionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DataCollectionServiceCreateSessionProcedure:
			dataCollectionServiceCreateSessionHandler.ServeHTTP(w, r)
		case DataCollectionServiceFinalizeSessionProcedure:
			dataCollectionServiceFinalizeSessionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDataCollectionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDataCollectionServiceHandler struct{}

func (UnimplementedDataCollectionServiceHandler) CreateSession(context.Context, *connect.Request[v1.CreateSessionRequest]) (*connect.Response[v1.CreateSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("opensock.dc.v1.DataCollectionService.CreateSession is not implemented"))
}

func (UnimplementedDataCollectionServiceHandler) FinalizeSession(context.Context, *connect.Request[v1.FinalizeSessionRequest]) (*connect.Response[v1.FinalizeSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("opensock.dc.v1.DataCollectionService.FinalizeSession is not implemented"))
}

// AdminServiceClient is a client for the opensock.dc.v1.AdminService service.
type AdminServiceClient interface {
	ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error)
	DeleteSession(context.Context, *connect.Request[v1.DeleteSessionRequest]) (*connect.Response[v1.DeleteResponse], error)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteResponse], error)
	GetConfig(context.Context, *connect.Request[v1.GetAdminConfigRequest]) (*connect.Response[v1.GetAdminConfigResponse], error)
	UpdateConfig(context.Context, *connect.Request[v1.UpdateAdminConfigRequest]) (*connect.Response[v1.GetAdminConfigResponse], error)
}

// NewAdminServiceClient constructs a client for the opensock.dc.v1.AdminService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	adminServiceMethods := v1.File_opensock_dc_v1_dc_proto.Services().ByName("AdminService").Methods()
	return &adminServiceClient{
		listSessions: connect.NewClient[v1.ListSessionsRequest, v1.ListSessionsResponse](
			httpClient,
			baseURL+AdminServiceListSessionsProcedure,
			connect.WithSchema(adminServiceMethods.ByName("ListSessions")),
			connect.WithClientOptions(opts...),
		),
		deleteSession: connect.NewClient[v1.DeleteSessionRequest, v1.DeleteResponse](
			httpClient,
			baseURL+AdminServiceDeleteSessionProcedure,
			connect.WithSchema(adminServiceMethods.ByName("DeleteSession")),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[v1.DeleteUserRequest, v1.DeleteResponse](
			httpClient,
			baseURL+AdminServiceDeleteUserProcedure,
			connect.WithSchema(adminServiceMethods.ByName("DeleteUser")),
			connect.WithClientOptions(opts...),
		),
		getConfig: connect.NewClient[v1.GetAdminConfigRequest, v1.GetAdminConfigResponse](
			httpClient,
			baseURL+AdminServiceGetConfigProcedure,
			connect.WithSchema(adminServiceMethods.ByName("GetConfig")),
			connect.WithClientOptions(opts...),
		),
		updateConfig: connect.NewClient[v1.UpdateAdminConfigRequest, v1.GetAdminConfigResponse](
			httpClient,
			baseURL+AdminServiceUpdateConfigProcedure,
			connect.WithSchema(adminServiceMethods.ByName("UpdateConfig")),
			connect.WithClientOptions(opts...),
		),
	}
}

// adminServiceClient implements AdminServiceClient.
type adminServiceClient struct {
	listSessions  *connect.Client[v1.ListSessionsRequest, v1.ListSessionsResponse]
	deleteSession *connect.Client[v1.DeleteSessionRequest, v1.DeleteResponse]
	deleteUser    *connect.Client[v1.DeleteUserRequest, v1.DeleteResponse]
	getConfig     *connect.Client[v1.GetAdminConfigRequest, v1.GetAdminConfigResponse]
	updateConfig  *connect.Client[v1.UpdateAdminConfigRequest, v1.GetAdminConfigResponse]
}

// ListSessions calls opensock.dc.v1.AdminService.ListSessions.
func (c *adminServiceClient) ListSessions(ctx context.Context, req *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error) {
	return c.listSessions.CallUnary(ctx, req)
}

// DeleteSession calls opensock.dc.v1.AdminService.DeleteSession.
func (c *adminServiceClient) DeleteSession(ctx context.Context, req *connect.Request[v1.DeleteSessionRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.deleteSession.CallUnary(ctx, req)
}

// DeleteUser calls opensock.dc.v1.AdminService.DeleteUser.
func (c *adminServiceClient) DeleteUser(ctx context.Context, req *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// GetConfig calls opensock.dc.v1.AdminService.GetConfig.
func (c *adminServiceClient) GetConfig(ctx context.Context, req *connect.Request[v1.GetAdminConfigRequest]) (*connect.Response[v1.GetAdminConfigResponse], error) {
	return c.getConfig.CallUnary(ctx, req)
}

// UpdateConfig calls opensock.dc.v1.AdminService.UpdateConfig.
func (c *adminServiceClient) UpdateConfig(ctx context.Context, req *connect.Request[v1.UpdateAdminConfigRequest]) (*connect.Response[v1.GetAdminConfigResponse], error) {
	return c.updateConfig.CallUnary(ctx, req)
}

// AdminServiceHandler is an implementation of the opensock.dc.v1.AdminService service.
type AdminServiceHandler interface {
	ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error)
	DeleteSession(context.Context, *connect.Request[v1.DeleteSessionRequest]) (*connect.Response[v1.DeleteResponse], error)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteResponse], error)
	GetConfig(context.Context, *connect.Request[v1.GetAdminConfigRequest]) (*connect.Response[v1.GetAdminConfigResponse], error)
	UpdateConfig(context.Context, *connect.Request[v1.UpdateAdminConfigRequest]) (*connect.Response[v1.GetAdminConfigResponse], error)
}

// NewAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminServiceHandler(svc AdminServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	adminServiceMethods := v1.File_opensock_dc_v1_dc_proto.Services().ByName("AdminService").Methods()
	adminServiceListSessionsHandler := connect.NewUnaryHandler(
		AdminServiceListSessionsProcedure,
		svc.ListSessions,
		connect.WithSchema(adminServiceMethods.ByName("ListSessions")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceDeleteSessionHandler := connect.NewUnaryHandler(
		AdminServiceDeleteSessionProcedure,
		svc.DeleteSession,
		connect.WithSchema(adminServiceMethods.ByName("DeleteSession")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceDeleteUserHandler := connect.NewUnaryHandler(
		AdminServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(adminServiceMethods.ByName("DeleteUser")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetConfigHandler := connect.NewUnaryHandler(
		AdminServiceGetConfigProcedure,
		svc.GetConfig,
		connect.WithSchema(adminServiceMethods.ByName("GetConfig")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceUpdateConfigHandler := connect.NewUnaryHandler(
		AdminServiceUpdateConfigProcedure,
		svc.UpdateConfig,
		connect.WithSchema(adminServiceMethods.ByName("UpdateConfig")),
		connect.WithHandlerOptions(opts...),
	)
	return "/opensock.dc.v1.AdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdminServiceListSessionsProcedure:
			adminServiceListSessionsHandler.ServeHTTP(w, r)
		case AdminServiceDeleteSessionProcedure:
			adminServiceDeleteSessionHandler.ServeHTTP(w, r)
		case AdminServiceDeleteUserProcedure:
			adminServiceDeleteUserHandler.ServeHTTP(w, r)
		case AdminServiceGetConfigProcedure:
			adminServiceGetConfigHandler.ServeHTTP(w, r)
		case AdminServiceUpdateConfigProcedure:
			adminServiceUpdateConfigHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminServiceHandler struct{}

func (UnimplementedAdminServiceHandler) ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("opensock.dc.v1.AdminService.ListSessions is not implemented"))
}

func (UnimplementedAdminServiceHandler) DeleteSession(context.Context, *connect.Request[v1.DeleteSessionRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("opensock.dc.v1.AdminService.DeleteSession is not implemented"))
}

func (UnimplementedAdminServiceHandler) DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("opensock.dc.v1.AdminService.DeleteUser is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetConfig(context.Context, *connect.Request[v1.GetAdminConfigRequest]) (*connect.Response[v1.GetAdminConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("opensock.dc.v1.AdminService.GetConfig is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateConfig(context.Context, *connect.Request[v1.UpdateAdminConfigRequest]) (*connect.Response[v1.GetAdminConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("opensock.dc.v1.AdminService.UpdateConfig is not implemented"))
}

// UploadServiceClient is a client for the opensock.dc.v1.UploadService service.
type UploadServiceClient interface {
	InitUpload(context.Context, *connect.Request[v1.InitUploadRequest]) (*connect.Response[v1.InitUploadResponse], error)
	UploadChunk(context.Context, *connect.Request[v1.UploadChunkRequest]) (*connect.Response[v1.UploadChunkResponse], error)
	CompleteUpload(context.Context, *connect.Request[v1.CompleteUploadRequest]) (*connect.Response[v1.CompleteUploadResponse], error)
}

// NewUploadServiceClient constructs a client for the opensock.dc.v1.UploadService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUploadServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UploadServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	uploadServiceMethods := v1.File_opensock_dc_v1_dc_proto.Services().ByName("UploadService").Methods()
	return &uploadServiceClient{
		initUpload: connect.NewClient[v1.InitUploadRequest, v1.InitUploadResponse](
			httpClient,
			baseURL+UploadServiceInitUploadProcedure,
			connect.WithSchema(uploadServiceMethods.ByName("InitUpload")),
			connect.WithClientOptions(opts...),
		),
		uploadChunk: connect.NewClient[v1.UploadChunkRequest, v1.UploadChunkResponse](
			httpClient,
			baseURL+UploadServiceUploadChunkProcedure,
			connect.WithSchema(uploadServiceMethods.ByName("UploadChunk")),
			connect.WithClientOptions(opts...),
		),
		completeUpload: connect.NewClient[v1.CompleteUploadRequest, v1.CompleteUploadResponse](
			httpClient,
			baseURL+UploadServiceCompleteUploadProcedure,
			connect.WithSchema(uploadServiceMethods.ByName("CompleteUpload")),
			connect.WithClientOptions(opts...),
		),
	}
}

// uploadServiceClient implements UploadServiceClient.
type uploadServiceClient struct {
	initUpload     *connect.Client[v1.InitUploadRequest, v1.InitUploadResponse]
	uploadChunk    *connect.Client[v1.UploadChunkRequest, v1.UploadChunkResponse]
	completeUpload *connect.Client[v1.CompleteUploadRequest, v1.CompleteUploadResponse]
}

// InitUpload calls opensock.dc.v1.UploadService.InitUpload.
func (c *uploadServiceClient) InitUpload(ctx context.Context, req *connect.Request[v1.InitUploadRequest]) (*connect.Response[v1.InitUploadResponse], error) {
	return c.initUpload.CallUnary(ctx, req)
}

// UploadChunk calls opensock.dc.v1.UploadService.UploadChunk.
func (c *uploadServiceClient) UploadChunk(ctx context.Context, req *connect.Request[v1.UploadChunkRequest]) (*connect.Response[v1.UploadChunkResponse], error) {
	return c.uploadChunk.CallUnary(ctx, req)
}

// CompleteUpload calls opensock.dc.v1.UploadService.CompleteUpload.
func (c *uploadServiceClient) CompleteUpload(ctx context.Context, req *connect.Request[v1.CompleteUploadRequest]) (*connect.Response[v1.CompleteUploadResponse], error) {
	return c.completeUpload.CallUnary(ctx, req)
}

// UploadServiceHandler is an implementation of the opensock.dc.v1.UploadService service.
type UploadServiceHandler interface {
	InitUpload(context.Context, *connect.Request[v1.InitUploadRequest]) (*connect.Response[v1.InitUploadResponse], error)
	UploadChunk(context.Context, *connect.Request[v1.UploadChunkRequest]) (*connect.Response[v1.UploadChunkResponse], error)
	CompleteUpload(context.Context, *connect.Request[v1.CompleteUploadRequest]) (*connect.Response[v1.CompleteUploadResponse], error)
}

// NewUploadServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUploadServiceHandler(svc UploadServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	uploadServiceMethods := v1.File_opensock_dc_v1_dc_proto.Services().ByName("UploadService").Methods()
	uploadServiceInitUploadHandler := connect.NewUnaryHandler(
		UploadServiceInitUploadProcedure,
		svc.InitUpload,
		connect.WithSchema(uploadServiceMethods.ByName("InitUpload")),
		connect.WithHandlerOptions(opts...),
	)
	uploadServiceUploadChunkHandler := connect.NewUnaryHandler(
		UploadServiceUploadChunkProcedure,
		svc.UploadChunk,
		connect.WithSchema(uploadServiceMethods.ByName("UploadChunk")),
		connect.WithHandlerOptions(opts...),
	)
	uploadServiceCompleteUploadHandler := connect.NewUnaryHandler(
		UploadServiceCompleteUploadProcedure,
		svc.CompleteUpload,
		connect.WithSchema(uploadServiceMethods.ByName("CompleteUpload")),
		connect.WithHandlerOptions(opts...),
	)
	return "/opensock.dc.v1.UploadService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UploadServiceInitUploadProcedure:
			uploadServiceInitUploadHandler.ServeHTTP(w, r)
		case UploadServiceUploadChunkProcedure:
			uploadServiceUploadChunkHandler.ServeHTTP(w, r)
		case UploadServiceCompleteUploadProcedure:
			uploadServiceCompleteUploadHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUploadServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUploadServiceHandler struct{}

func (UnimplementedUploadServiceHandler) InitUpload(context.Context, *connect.Request[v1.InitUploadRequest]) (*connect.Response[v1.InitUploadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("opensock.dc.v1.UploadService.InitUpload is not implemented"))
}

func (UnimplementedUploadServiceHandler) UploadChunk(context.Context, *connect.Request[v1.UploadChunkRequest]) (*connect.Response[v1.UploadChunkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("opensock.dc.v1.UploadService.UploadChunk is not implemented"))
}

func (UnimplementedUploadServiceHandler) CompleteUpload(context.Context, *connect.Request[v1.CompleteUploadRequest]) (*connect.Response[v1.CompleteUploadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("opensock.dc.v1.UploadService.CompleteUpload is not implemented"))
}

// ConfigServiceClient is a client for the opensock.dc.v1.ConfigService service.
type ConfigServiceClient interface {
	Get(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[v1.GetConfigResponse], error)
}

// NewConfigServiceClient constructs a client for the opensock.dc.v1.ConfigService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConfigServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConfigServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	configServiceMethods := v1.File_opensock_dc_v1_dc_proto.Services().ByName("ConfigService").Methods()
	return &configServiceClient{
		get: connect.NewClient[v1.GetConfigRequest, v1.GetConfigResponse](
			httpClient,
			baseURL+ConfigServiceGetProcedure,
			connect.WithSchema(configServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
	}
}

// configServiceClient implements ConfigServiceClient.
type configServiceClient struct {
	get *connect.Client[v1.GetConfigRequest, v1.GetConfigResponse]
}

// Get calls opensock.dc.v1.ConfigService.Get.
func (c *configServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetConfigRequest]) (*connect.Response[v1.GetConfigResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// ConfigServiceHandler is an implementation of the opensock.dc.v1.ConfigService service.
type ConfigServiceHandler interface {
	Get(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[v1.GetConfigResponse], error)
}

// NewConfigServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConfigServiceHandler(svc ConfigServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	configServiceMethods := v1.File_opensock_dc_v1_dc_proto.Services().ByName("ConfigService").Methods()
	configServiceGetHandler := connect.NewUnaryHandler(
		ConfigServiceGetProcedure,
		svc.Get,
		connect.WithSchema(configServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	return "/opensock.dc.v1.ConfigService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConfigServiceGetProcedure:
			configServiceGetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConfigServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConfigServiceHandler struct{}

func (UnimplementedConfigServiceHandler) Get(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[v1.GetConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("opensock.dc.v1.ConfigService.Get is not implemented"))
}
